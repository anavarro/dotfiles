" Author: Alvaro Navarro <anavarro@achtung.es>

" Setting up the vim plugin bundler
" Kudos go to Juan Pedro Fisanotti (@fisadev) for the idea
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

" Some Linux distributions set filetype in general vimrc config
filetype off
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'gmarik/vundle'                   " vundle
Plugin 'scrooloose/nerdtree'             " file browser
Plugin 'scrooloose/syntastic'            " languages code checker
Plugin 'mhinz/vim-signify'               " realtime version control system diff icons
Plugin 'ctrlpvim/ctrlp.vim'              " full path fuzzy finder
Plugin 'bling/vim-bufferline'            " manage buffers the way it should be
Plugin 'Shougo/neocomplete.vim'          " keyword completion in the current buffer
Plugin 'majutsushi/tagbar'               " tags browser from source code files
Plugin 'vim-airline/vim-airline'         " airline plugin
Plugin 'vim-airline/vim-airline-themes'  " airline themes
Plugin 'nanotech/jellybeans.vim'         " jellybeans theme
Plugin 'vim-scripts/a.vim'               " switch between source files and header
Plugin 'klen/python-mode'                " python mode
Plugin 'fatih/vim-go'                    " golang support
Plugin 'zah/nimrod.vim'                  " nim support
Plugin 'rust-lang/rust.vim'              " rust support
Plugin 'mileszs/ack.vim'                 " call ack from vim
Plugin 'bronson/vim-trailing-whitespace' " show trailing whitespace
Plugin 'rbgrouleff/bclose.vim'           " delete a buffer without closing the window

" Install plugins the first time vim runs
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

filetype plugin indent on

" Master key
let mapleader = ","

" disable vi compatibility
set nocompatible
set nobackup
set noswapfile

" Sets the number of lines vim checks for initializations
" Set to 0 in order to avoid security problems
set modelines=0

" General Editing Stuff
set tabstop=4       " Use 4 spaces ident style
set softtabstop=4   " How many columns uses when hitting Tab
set shiftwidth=4    " Reindenting to 4 spaces
set expandtab       " Produce the appropriate number of spaces
set autoindent      " Automatically set the indent of a new line
set smartindent     " Does the right thing (mostly)
set nowrap          " Don't wrap text
set linebreak       " Wrap at word
set textwidth=120   " Wrap lines at 120 chars
set hidden          " Allow buffer switching without saving

" Use 'g' flag by default with :s/foo/bar/.
set gdefault

" a showmatch will wait half a second or until a character is typed
set cpoptions-=m

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log

" Autocomplete commands
set wildmenu
set wildmode=list:longest,full
set whichwrap=b,s,h,l,<,>,[,]

" Searching
set hlsearch          " highlight search
set incsearch         " Incremental search, search as you type
set ignorecase        " Ignore case when searching
set smartcase         " Ignore case when searching lowercase
set showmatch         " Highlights the matching braces|brackets|parens when the cursor is on a bracket.

" Look & Feel Options
syntax on             " Syntax highlighting
set t_Co=256          " 256 colors
set sidescrolloff=2   " scrollbars
set scrolloff=3       " when scrolling, keep cursor 3 lines away from screen border
set numberwidth=4     " whanges how wide the column containing line numbers will be.
set equalalways       " multiple windows, when created, are equal in size
set splitbelow        " make the new window appear below the current window
set splitright        " make the new window appear on the right
set cursorline        " cursor highlights
set ruler             " show ruler
set number            " Show line numbers
set showcmd           " show current command on ruler
set showmode          " show current mode on ruler
set laststatus=2      " always show the status line
set vb t_vb=          " Turn off bell
set foldmethod=indent " fold group of lines with the same indent
set foldlevel=1       " fold one level

" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" Invisible characters
set listchars=trail:.,tab:>-,eol:$
set listchars+=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
set nolist

set backspace=indent,eol,start
set matchpairs+=<:>
set nofoldenable " Turn off folding

set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000

" Persistent undos
set undofile
set undodir=~/.vim/dirs/undos

if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

" Filetype specific stuff
autocmd FileType mail       setlocal fo+=aw
autocmd FileType html       setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType python     setlocal omnifunc=pythoncomplete#Complete
autocmd FileType c          set comments=sl:/*,mb:\ *,elx:\ */

" Python-mode
let g:pymode_lint_on_write = 0    " don't use linter, we use syntastic for that
let g:pymode_lint_signs    = 0
let g:pymode_folding       = 0    " don't fold python code on open
let g:pymode_rope          = 0    " don't load rope by default. Change to 1 to use rope

" Airplane
let g:airline_theme = 'jellybeans'

" Bufferline
let g:bufferline_echo       = 0    " don't automatically echo to the command bar
let g:bufferline_show_bufnr = 0    " don't display buffer numbers
let g:bufferline_modified   = '*'  " symbol to denote that a buffer is modified
let g:bufferline_rotate     = 0    " no rotate, no scrolling

" Syntastic
let g:syntastic_mode="active"
let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq   = 1

" CtrlP
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

" Signify
let g:signify_vcs_list = [ 'git', 'svn' ]

" Neocomplete
let g:neocomplete#enable_at_startup = 1                 " Use neocomplete.
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#disable_auto_complete = 0             " auto completion
let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.

inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

" NERDTree
let g:NERDShutUp       = 1  " Silent mode
let NERDTreeMinimalUI  = 1  " Minimal UI
let b:match_ignorecase = 1  " ignore lower/upper case
let NERDTreeIgnore     = ['\.pyc$', '\.pyo$', '\.o$', '\.so$']

" Navigate windows with meta+arrows
map  <M-Right>  <c-w>l
map  <M-Left>   <c-w>h
map  <M-Up>     <c-w>k
map  <M-Down>   <c-w>j
imap <M-Right>  <ESC><c-w>l
imap <M-Left>   <ESC><c-w>h
imap <M-Up>     <ESC><c-w>k
imap <M-Down>   <ESC><c-w>j

" Make cursor move by visual lines instead of file lines (when wrapping)
nnoremap <up>   gk
nnoremap <down> gj
imap     <up>   <C-o>gk
imap     <down> <C-o>gj

" (re)mapping keys
nnoremap <leader>e  <esc>:qall!<cr>      " close all buffers and exit
nnoremap <Leader>v  :vsp^M^W^W<cr>       " split vertically
nnoremap <Leader>h  :sp^W^W<cr>          " split horizontally
nnoremap <leader>r  :source ~/.vimrc<CR> " reload vimrc file
nnoremap <leader>a  :Ack<space>          " call ack plugin

nnoremap <CR> gf           " open the current file under cursor with 'enter'
nnoremap f :cn<CR>         " move to next error
nnoremap g :cp<CR>         " move to previous error
nnoremap W :bn<cr>         " move to next buffer
nnoremap Q :bp<cr>         " move to previous buffer
nnoremap D :Bclose<cr>     " delete current buffer (plugin)
nnoremap F :CtrlP<CR>      " search files and buffers (plugin)
nnoremap E <esc><C-]><cr>  " look up the current symbol
nnoremap Y y$              " yank from the cursor to the end of the line
nnoremap I :set list!<cr>  " show special characters
nnoremap ! :nohlsearch<cr> " switch off the current search

nnoremap <F2>  :A<CR>                         " switch between source and header
nnoremap <F3>  :NERDTreeToggle<CR>            " show nerdtree plugin
nnoremap <F4>  :TagbarToggle<CR>              " show tagbar plugin
nnoremap <F5>  :silent make\|redraw!\|cw<CR>  " call make and show result
nnoremap <F7>  :FixWhitespace<CR>             " fix white spaces
nnoremap <F8>  :!gentags<CR>                  " generates tags from current directory
set pastetoggle=<F6>                          " switch on/off paste mode

" shellscript buffers should have executable permissions and call the shell
autocmd BufWritePost *.sh :!chmod a+x <afile>
autocmd BufEnter     *.sh if getline(1) == "" | :call setline(1, "#!/bin/sh")

" Call sudo when editing a readonly file
cmap w!! %!sudo tee > /dev/null %

colorscheme jellybeans

" Load current tag file
set tags=./tags

" Load pregenerated tag files from tags folder
for i in split(glob('~/.vim/tags/*.vim'), '\n')
    exe 'source' i
endfor

