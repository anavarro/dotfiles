" Author: Alvaro Navarro <anavarro@achtung.es>

" Setting up the vim plugin bundler
" Kudos go to Juan Pedro Fisanotti (@fisadev) for the idea
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

" Some Linux distributions set filetype in general vimrc config
filetype off
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'gmarik/vundle'                   " vundle
Plugin 'scrooloose/nerdtree'             " file browser
Plugin 'scrooloose/syntastic'            " languages code checker
Plugin 'mhinz/vim-signify'               " realtime version control system diff icons
Plugin 'godlygeek/csapprox'              " using GUI color settings in a terminal
Plugin 'ctrlpvim/ctrlp.vim'              " full path fuzzy finder
Plugin 'bling/vim-bufferline'            " manage buffers the way it should be
Plugin 'rbgrouleff/bclose.vim'           " delete a buffer without closing the window
Plugin 'Shougo/neocomplete.vim'          " keyword completion in the current buffer
Plugin 'majutsushi/tagbar'               " tags browser from source code files
Plugin 'vim-airline/vim-airline'         " airline plugin
Plugin 'vim-airline/vim-airline-themes'  " airline themes
Plugin 'nanotech/jellybeans.vim'         " jellybeans theme
Plugin 'vim-scripts/a.vim'               " switch between source files and header
Plugin 'FooSoft/vim-argwrap'             " wrap function arguments
Plugin 'bronson/vim-trailing-whitespace' " show trailing whitespace
Plugin 'rip-rip/clang_complete'          " c/c++ autocomplete
Plugin 'klen/python-mode'                " python
Plugin 'fatih/vim-go'                    " golang
Plugin 'rust-lang/rust.vim'              " rust

" Install plugins the first time vim runs
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

filetype plugin indent on

" Master key
let mapleader = ","

" disable some stuff
set nocompatible
set nobackup
set noswapfile
set nomodeline

" General Editing Stuff
set tabstop=4       " Use 4 spaces ident style
set softtabstop=4   " How many columns uses when hitting Tab
set shiftwidth=4    " Reindenting to 4 spaces
set expandtab       " Produce the appropriate number of spaces
set autoindent      " Automatically set the indent of a new line
set copyindent      " Copy (exact) indention from the previous line.
set nosmartindent   " Does not the right thing
set nowrap          " Don't wrap text
set linebreak       " Wrap at word
set textwidth=0     " Don't automatically wrap lines.
set hidden          " Allow buffer switching without saving
set ttyfast         " Improves redrawing for newer computers.

" Use 'g' flag by default with :s/foo/bar/.
set gdefault

" a showmatch will wait half a second or until a character is typed
set cpoptions-=m

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log

" Autocomplete commands
set wildmenu
set wildchar=<Tab>
set wildmode=list:longest,full
set wildignore+=*.o,*.obj,*.pyc,*.aux,*.bbl,*.blg,.git,.svn,.hg
set whichwrap=b,s,h,l,<,>,[,]

" Searching
set hlsearch          " highlight search
set incsearch         " Incremental search, search as you type
set ignorecase        " Ignore case when searching
set smartcase         " Ignore case when searching lowercase
set showmatch         " Highlights the matching braces|brackets|parens when the cursor is on a bracket.

" Look & Feel Options
syntax on             " Syntax highlighting
set t_Co=256          " 256 colors
set sidescrolloff=2   " scrollbars
set scrolloff=3       " when scrolling, keep cursor 3 lines away from screen border
set numberwidth=4     " whanges how wide the column containing line numbers will be.
set equalalways       " multiple windows, when created, are equal in size
set splitbelow        " make the new window appear below the current window
set splitright        " make the new window appear on the right
set cursorline        " cursor highlights
set ruler             " show ruler
set number            " Show line numbers
set relativenumber    " Show relative numbers instead of absolute ones.
set showcmd           " show current command on ruler
set showmode          " show current mode on ruler
set laststatus=2      " always show the status line
set vb t_vb=          " Turn off bell
set foldmethod=indent " fold group of lines with the same indent
set foldlevel=1       " fold one level

" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" Invisible characters
set listchars=trail:.,tab:>-,eol:$
set listchars+=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
set nolist

set backspace=indent,eol,start
set matchpairs+=<:>
set nofoldenable " Turn off folding

set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000

" Persistent undos
set undofile
set undodir=~/.vim/dirs/undos

if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

" Mail
augroup mail
au!
au FileType mail setl spell     " Enable spellchecking.
au FileType mail setl linebreak " keep paragraphs as single lines
au FileType mail setl expandtab " Use spaces instead of tabs.
au FileType mail setl wrap
augroup end

" C/C++ files
augroup c_cpp
au!
au FileType c,cpp setl comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,bO:///,O://
au FileType c,cpp nmap <leader>b  <esc>:silent make\|redraw!\|cw<CR>
augroup end

" Python
augroup python
au!
au FileType python setl omnifunc=pythoncomplete#Complete
au FileType python setl expandtab     " Use spaces instead of tabs.
au FileType python setl tabstop=4     " A tab counts for 4 spaces.
au FileType python setl softtabstop=4 " Causes backspace to delete 4 spaces.
au FileType python setl shiftwidth=4  " Shift by 4 spaces.
augroup end

" Go
augroup go
au!
au FileType go nmap <leader>b  <Plug>(go-build)
au FileType go nmap <leader>r  <Plug>(go-run)
au FileType go nmap <leader>t  <Plug>(go-test)
augroup go

" Shell script
augroup sh
au!
au FileType sh setl noexpandtab  " Use tabs instead of spaces.
au BufWritePost *.sh :!chmod a+x <afile>
au BufEnter     *.sh if getline(1) == "" | :call setline(1, "#!/bin/sh")
augroup end

" Git commits
augroup gitcommit
au!
au FileType gitcommit setl spell     " Enable spellchecking.
au FileType gitcommit setl expandtab " Use spaces instead of tabs.
augroup end

" Markdown
augroup markdown
au!
au FileType markdown setl spell         " Enable spellchecking.
au FileType markdown setl expandtab     " Use spaces instead of tabs.
au FileType markdown setl tabstop=2     " Lists are indented with 2 spaces.
au FileType markdown setl softtabstop=2 " Causes backspace to delete 2 spaces.
au FileType markdown setl shiftwidth=2  " Shift by 2 spaces.
augroup end

" HTML
augroup html
au!
au FileType html setl tabstop=2     " A tab counts for 4 spaces.
au FileType html setl softtabstop=2 " Causes backspace to delete 4 spaces.
au FileType html setl shiftwidth=2  " Shift by 4 spaces.
augroup end

" Python-mode
let g:pymode_lint_on_write    = 0    " don't use linter, we use syntastic for that
let g:pymode_lint_signs       = 0    " no linter signs
let g:pymode_folding          = 0    " don't fold python code on open
let g:pymode_rope             = 1    " don't load rope by default. Change to 1 to use rope
let g:pymode_rope_regenerate_on_write = 1
let g:pymode_trim_whitespaces = 1    " trim unused white spaces on save
let g:pymode_options          = 1
let g:pymode_run_bind         = '<leader>r'
let g:pymode_breakpoint_bind  = '<leader>b'

" Airplane
let g:airline_theme = 'jellybeans'

" Bufferline
let g:bufferline_echo       = 0    " don't automatically echo to the command bar
let g:bufferline_show_bufnr = 0    " don't display buffer numbers
let g:bufferline_modified   = '*'  " symbol to denote that a buffer is modified
let g:bufferline_rotate     = 0    " no rotate, no scrolling

" Syntastic
let g:syntastic_mode = "active"
let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq   = 1

" Clang autocomplete
let g:clang_complete_auto = 1
let g:clang_complete_copen = 1
let g:clang_complete_macros=1
let g:clang_library_path='/usr/lib/llvm-3.6/lib'
let g:clang_use_library=1
let g:clang_auto_select=1 "select first entry in popup menu but don't insert in code
let g:clang_complete_hl_errors=1 " highlight errors and warnings
let g:clang_periodic_quickfix=1 " update quickfix periodically
let g:clang_trailing_placeholder=1 " add trailing placeholder after function
let g:clang_close_preview=1 " close preview window after completion
let g:clang_debug=1
let g:clang_jumpto_declaration_key='<c-e>'

" CtrlP
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

" Signify
let g:signify_vcs_list = [ 'git', 'svn' ]

" Neocomplete
let g:neocomplete#enable_at_startup = 1                 " Use neocomplete.
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#disable_auto_complete = 0             " auto completion
let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.

inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

" NERDTree
let g:NERDShutUp       = 1  " Silent mode
let NERDTreeMinimalUI  = 1  " Minimal UI
let b:match_ignorecase = 1  " ignore lower/upper case
let NERDTreeIgnore     = ['\.pyc$', '\.pyo$', '\.o$', '\.so$']

" Navigate windows with meta+arrows
map  <M-Right>  <c-w>l
map  <M-Left>   <c-w>h
map  <M-Up>     <c-w>k
map  <M-Down>   <c-w>j
imap <M-Right>  <ESC><c-w>l
imap <M-Left>   <ESC><c-w>h
imap <M-Up>     <ESC><c-w>k
imap <M-Down>   <ESC><c-w>j

" Make cursor move by visual lines instead of file lines (when wrapping)
nnoremap <up>   gk
nnoremap <down> gj

" (re)mapping keys
nnoremap Q  :bp<cr>              " move to previous buffer
nnoremap W  :bn<cr>              " move to next buffer
nnoremap <leader>e  <esc>:qall!<cr>      " close all buffers and exit
nnoremap <leader>t  :NERDTreeToggle<cr>  " show nerdtree plugin

nnoremap V  :vsp^M^W^W<cr>       " split vertically
nnoremap H  :sp^W^W<cr>          " split horizontally
nnoremap <leader>s  :source ~/.vimrc<CR> " reload vimrc file
nnoremap <leader>n  :cn<CR>              " move to next error
nnoremap <leader>p  :cp<CR>              " move to previous error
nnoremap <leader>f  :CtrlP<CR>           " search files and buffers (plugin)
nnoremap D  :Bclose<cr>          " delete current buffer (plugin)
nnoremap <leader>i  :set list!<cr>       " show special characters
nnoremap <leader>!  :nohlsearch<cr>      " switch off the current search
nnoremap <leader>x  :ArgWrap<CR>

nnoremap <CR> gf           " open the current file under cursor with 'enter'

nnoremap <F2>  :A<CR>                         " switch between source and header
nnoremap <F4>  :TagbarToggle<CR>              " show tagbar plugin
set pastetoggle=<F6>                          " switch on/off paste mode

" Call sudo when editing a readonly file
cmap w!! %!sudo tee > /dev/null %

colorscheme jellybeans

" Load current tag file
set tags=./tags

" Load pregenerated tag files from tags folder
for i in split(glob('~/.vim/tags/*.vim'), '\n')
    exe 'source' i
endfor


