" Author: Alvaro Navarro <anavarro@achtung.es>
" Date:   Juli 03th 2014

" Setting up the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

" Some Linux distributions set filetype in general vimrc config
filetype off
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Vundle 
Bundle 'gmarik/vundle'
" File browser
Bundle 'scrooloose/nerdtree'
" Comment generator
Bundle 'scrooloose/nerdcommenter'
" Former Zen coding plugin
Bundle 'mattn/emmet-vim'
" Manage buffers the way it should be
Bundle 'techlivezheng/vim-plugin-minibufexpl'
" Fast and responsive way to manage files and buffers
Bundle 'sjbach/lusty'
" Run commands whithin a buffer
Bundle 'rosenfeld/conque-term'
" keyword completion out of the current buffer content
Bundle 'Shougo/neocomplcache.vim'
" Tags browser from source code files
Bundle 'majutsushi/tagbar'
" Automatic closing of quotes, parenthesis
Bundle 'Raimondi/delimitMate'
" easily delete, change and add such surroundings in pairs
Bundle 'tpope/vim-surround'
" Makes GUI colorschemes work in terminal
Bundle 'godlygeek/csapprox'
" Wombat theme
Bundle 'vim-scripts/Wombat'
" Airline
Bundle 'bling/vim-airline'
" Window chooser
Bundle 't9md/vim-choosewin'
" Git/mercurial/others diff icons on the side of the file lines
Bundle 'mhinz/vim-signify'
" Snippets with dependencies
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "honza/vim-snippets"
Bundle "garbas/vim-snipmate"
" Languages code checker
Bundle 'scrooloose/syntastic'
" Omni completion (intellisense) in C and C++ files
Bundle 'vim-scripts/OmniCppComplete'
" Switch between source files and header
Bundle 'vim-scripts/a.vim'
" Compile or run a single source file without leaving vim
Bundle 'xuhdev/SingleCompile'
" Full featured Go (golang) support
Plugin 'fatih/vim-go'
" Python mode (indentation, doc, refactor, lints, code checking, motion
Bundle 'klen/python-mode'

" Install plugins the first time vim runs
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

filetype plugin indent on

" Master key
let mapleader = ","

" disable vi compatibility
set nocompatible
set nobackup

" Sets the number of lines vim checks for initializations
" Set to 0 in order to avoid security problems
set modelines=0

" General Editing Stuff
set tabstop=4       " Use 4 spaces ident style
set softtabstop=4   " How many columns uses when hitting Tab
set shiftwidth=4    " Reindenting to 4 spaces
set expandtab       " Produce the appropriate number of spaces
set autoindent      " Automatically set the indent of a new line
set smartindent     " Does the right thing (mostly)
set nowrap          " Don't wrap text
set linebreak       " Wrap at word
set textwidth=120   " Wrap lines at 120 chars

" Use 'g' flag by default with :s/foo/bar/.
set gdefault

" a showmatch will wait half a second or until a character is typed
set cpoptions-=m

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" Autocomplete commands
set wildmenu
set wildmode=list:longest,full
set whichwrap=b,s,h,l,<,>,[,]

" Searching
set hlsearch          " highlight search
set incsearch         " Incremental search, search as you type
set ignorecase        " Ignore case when searching 
set smartcase         " Ignore case when searching lowercase
set showmatch         " Highlights the matching braces|brackets|parens when the cursor is on a bracket.

" Look & Feel Options
syntax on             " Syntax highlighting
set t_Co=256          " 256 colors
set sidescrolloff=2   " scrollbars
set scrolloff=3       " when scrolling, keep cursor 3 lines away from screen border
set numberwidth=4     " whanges how wide the column containing line numbers will be.
set equalalways       " multiple windows, when created, are equal in size
set splitbelow        " make the new window appear below the current window
set splitright        " make the new window appear on the right   
set cursorline        " cursor highlights
set ruler             " show ruler
set number            " Show line numbers
set showcmd           " show current command on ruler
set showmode          " show current mode on ruler
set laststatus=2      " always show the status line
set vb t_vb=          " Turn off bell
set showmode 
set showcmd
set foldmethod=indent
set foldlevel=1

highlight clear SignColumn
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) 
set statusline=%<%f
set statusline+=%w%h%m%r
set statusline+=\ [%{&ff}/%Y]
set statusline+=\ [%{getcwd()}]
set statusline+=%=%-14.(%l,%c%V%)\ %p%%

" Airplane
let g:airline_powerline_fonts = 0
let g:airline_theme = 'bubblegum'
let g:airline#extensions#whitespace#enabled = 0

" Undo 
set undofile    " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos

if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

" Python-mode ------------------------------
" don't use linter, we use syntastic for that
let g:pymode_lint_on_write = 0
let g:pymode_lint_signs = 0
" don't fold python code on open
let g:pymode_folding = 0
" don't load rope by default. Change to 1 to use rope
let g:pymode_rope = 0

" navigate windows with meta+arrows
map <M-Right> <c-w>l
map <M-Left> <c-w>h
map <M-Up> <c-w>k
map <M-Down> <c-w>j
imap <M-Right> <ESC><c-w>l
imap <M-Left> <ESC><c-w>h
imap <M-Up> <ESC><c-w>k
imap <M-Down> <ESC><c-w>j

" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" Invisible characters 
set listchars=trail:.,tab:>-,eol:$
set listchars+=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
set nolist

set backspace=indent,eol,start
set matchpairs+=<:>
set nofoldenable " Turn off folding 

" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
map k gk
imap <up> <C-o>gk
map <down> gj
map j gj
imap <down> <C-o>gj
map E ge

" Map 'enter' to open the current file under cursor
map <CR> gf  

autocmd FileType mail       setlocal fo+=aw
autocmd FileType html       setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType python     highlight Excess ctermbg=Green guibg=Black
autocmd FileType python     match Excess /\%120v.*/
autocmd FileType python     set nowrap
autocmd FileType c          set comments=sl:/*,mb:\ *,elx:\ */

" Omni Completion
set omnifunc=syntaxcomplete#Complete

let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" Conquer Term -------------
nmap <leader>c :ConquerTerm
let g:ConqueTerm_FastMode = 1
let g:ConqueTerm_EscKey = '<Esc>'

" Syntastic ------------
" show list of errors and warnings on the current file
nmap <leader>n :Errors<CR>
" don't put icons on the sign column (it hides the vcs status icons of signify)
let g:syntastic_enable_signs = 0
let g:syntastic_quiet_messages = {'level': 'warnings'}

" Signify ----------
" this first setting decides in which order try to guess your current vcs
let g:signify_vcs_list = [ 'svn', 'git' ]
" mappings to jump to changed blocks
nmap <leader>sn <plug>(signify-next-hunk)
nmap <leader>sp <plug>(signify-prev-hunk)
" nicer colors
highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227

" Window Chooser ------------------------------
" mapping
nmap  -  <Plug>(choosewin)
" show big letters
let g:choosewin_overlay_enable = 1

" NeoComplCache  -------------------
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_ignore_case = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_auto_select = 1
let g:neocomplcache_enable_fuzzy_completion = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_fuzzy_completion_start_length = 1
let g:neocomplcache_auto_completion_start_length = 1
let g:neocomplcache_auto_completion_start_length = 1
let g:neocomplcache_manual_completion_start_length = 1
let g:neocomplcache_min_keyword_length = 1
let g:neocomplcache_min_syntax_length = 1
let g:neocomplcache_same_filetype_lists = {}
let g:neocomplcache_same_filetype_lists._ = '_'

" a.vim  ------------------
map <F2> :A<CR>

" NERDTree ------
map <F3> :NERDTreeToggle<CR>
" Silent mode
let g:NERDShutUp=1
" ignore lower/upper case
let b:match_ignorecase = 1
" do not show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.o$', '\.so$']

" Tagbar -----------------
map <F4> :TagbarToggle<CR>
" autofocus on tagbar open
let g:tagbar_autofocus = 1

" complete option
let g:AutoComplPop_IgnoreCaseOption = 0
let g:AutoComplPop_BehaviorKeywordLength = 2

" automatically give executable permissions if filename is *.sh
au BufWritePost *.sh :!chmod a+x <afile>

" automatically insert "#!/bin/sh" line for *.sh files
au BufEnter *.sh if getline(1) == "" | :call setline(1, "#!/bin/sh")

" Minibuffer
noremap <leader>e <esc>:1,300 bd!<cr>:q!<cr>
noremap <leader>q <esc>:q!<cr>

" Show special characters
noremap <Leader>i :set list!<cr>
noremap <Leader>v :vsp^M^W^W<cr>
noremap <Leader>h ^W^W<cr>

" Moving next and previous result (erros/finds)
" map e :cp<CR>
map f :cn<CR>
" map <Leader>l :cl<CR>

noremap W :bn<cr>
noremap Q :bp<cr>
noremap D :bd!<cr>
noremap E <esc><C-]><cr>

" Tags generation
set tags=./tags;/ 
map <F12> :!ctags -R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q+f --language-force=C++ .<CR>

imap <c-space> <c-x><c-o>
cmap w!! %!sudo tee > /dev/null %

set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000

" Allow buffer switching without saving
set hidden 

" Wrapped lines goes down/up to next row, rather than next line in file.
nnoremap j gj
nnoremap k gk

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Switch Off The Current Search
nnoremap <silent> <Leader>/ :nohlsearch<CR>

" Reload vimrc file
nnoremap <silent> <LocalLeader>rs :source ~/.vimrc<CR>

" Compile
nmap <F9>  :SCCompile<cr>
nmap <F10> :SCCompileRun<cr>

function TrimWhiteSpace()
  %s/\s*$//
  ''
endfunction

function! Chomp(str)
    return substitute(a:str, '\n$', '', '')
endfunction

function! DmenuOpen(cmd)
    let fname = Chomp(system("find . | grep -vE 'svn|docs' | grep -E '.cpp$|.h$|.py$|Makefile|.java$' | dmenu -i -l 20 -p " . a:cmd))
    if empty(fname)
        return
    endif
    execute a:cmd . " " . fname
endfunction

map <c-t> :call DmenuOpen("tabe")<cr>
map <c-f> :call DmenuOpen("e")<cr>

" Prompt color
if &term =~ "xterm\\|rxvt"
  let &t_EI = "\<Esc>]12;red\x7"
  silent !echo -ne "\033]12;red\007"
  autocmd VimLeave * silent !echo -ne "\033]112\007"
endif

colorscheme wombat

